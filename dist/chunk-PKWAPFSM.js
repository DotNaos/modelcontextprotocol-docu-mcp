import{StdioServerTransport as y}from"@modelcontextprotocol/sdk/server/stdio.js";import{McpServer as E}from"@modelcontextprotocol/sdk/server/mcp.js";import{z as f}from"zod";var d={typescript:{repo:"https://github.com/modelcontextprotocol/typescript-sdk",readme:"https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/refs/heads/main/README.md"},python:{repo:"https://github.com/modelcontextprotocol/python-sdk",readme:"https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/refs/heads/main/README.md"}},a={FULL_DOCU:"https://modelcontextprotocol.io/llms-full.txt",repos:d},p=Object.keys(d);async function g(r){try{let t=await fetch(r);if(!t.ok)throw new Error(`Error fetching documentation from ${r}: ${t.status} ${t.statusText}`);return await t.text()}catch(t){throw console.error(`Failed to fetch documentation: ${t}`),t}}function u(r,t){let e=r.split(`
`),o=[],n=[];e.forEach((s,i)=>{s.match(/^#+\s/)&&n.push(i)}),n.push(e.length);let h=new RegExp(`^\\\`\\\`\\\`${t}\\b`,"m");for(let s=0;s<n.length-1;s++){let i=n[s],x=n[s+1],m=e.slice(i,x).join(`
`);h.test(m)&&o.push(m)}return o}async function l(r){let t=a.repos[r].readme;try{let e=await fetch(t);if(!e.ok)throw new Error(`Error fetching README from ${t}: ${e.status} ${e.statusText}`);return await e.text()}catch(e){throw console.error(`Failed to fetch README for ${r}: ${e}`),e}}var c=class{constructor(){this.server=new E({name:"ModelContextProtocol Docu Server",version:"0.1.0"},{capabilities:{logging:{},tools:{}}}),this.registerTools()}registerTools(){this.server.tool("get_code_examples","Get all code examples for a specified language from the main documentation.",{language:f.enum(p).optional()},async({language:t})=>{try{let e=await g(a.FULL_DOCU),n=u(e,t||"typescript");return{content:[{type:"text",text:JSON.stringify(n,null,2)}]}}catch(e){let o=e instanceof Error?e.message:String(e);throw this.error("Error in get_code_examples:",o),new Error(`Failed to get code examples: ${o}`)}}),this.server.tool("get_readme","Get the README content for the specified SDK language.",{language:f.enum(p)},async({language:t})=>{try{return{content:[{type:"text",text:await l(t)}]}}catch(e){let o=e instanceof Error?e.message:String(e);throw this.error(`Error in get_readme for ${t}:`,o),new Error(`Failed to fetch README for ${t}: ${o}`)}})}async connect(t){try{await this.server.connect(t),this.log("MCP Docu Server connected and ready.")}catch(e){let o=e instanceof Error?e.message:String(e);throw this.error("Failed to connect server:",o),new Error(`Server connection failed: ${o}`)}}log(...t){this.server.server.sendLoggingMessage({level:"info",data:t.map(e=>typeof e=="string"?e:JSON.stringify(e))})}error(...t){this.server.server.sendLoggingMessage({level:"error",data:t.map(e=>typeof e=="string"?e:JSON.stringify(e))})}};async function v(){let r=new c,t=new y;await r.connect(t)}v().catch(r=>{console.error("Failed to start server:",r instanceof Error?r.message:String(r)),process.exit(1)});export{c as a,v as b};
