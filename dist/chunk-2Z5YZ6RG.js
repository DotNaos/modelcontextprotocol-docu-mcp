import{StdioServerTransport as x}from"@modelcontextprotocol/sdk/server/stdio.js";import{McpServer as f}from"@modelcontextprotocol/sdk/server/mcp.js";import{z as v}from"zod";var h={TYPESCRIPT_SDK_REPO:{repo:"https://github.com/modelcontextprotocol/typescript-sdk",readme:"https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/refs/heads/main/README.md"},PYTHON_SDK_REPO:{repo:"https://github.com/modelcontextprotocol/python-sdk",readme:"https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/refs/heads/main/README.md"}},l={FULL_DOCU:"https://modelcontextprotocol.io/llms-full.txt",repos:h},g=["typescript","python"];async function a(o){try{let t=await fetch(o);if(!t.ok)throw new Error(`Error fetching documentation from ${o}: ${t.status} ${t.statusText}`);return await t.text()}catch(t){throw console.error(`Failed to fetch documentation: ${t}`),t}}function d(o,t){let e=o.split(`
`),n=[],s=[];e.forEach((r,c)=>{r.match(/^#+\s/)&&s.push(c)}),s.push(e.length);let u=new RegExp(`^\\\`\\\`\\\`${t}\\b`,"m");for(let r=0;r<s.length-1;r++){let c=s[r],m=s[r+1],p=e.slice(c,m).join(`
`);u.test(p)&&n.push(p)}return n}var i=class{constructor(){this.server=new f({name:"ModelContextProtocol Docu Server",version:"0.1.0"},{capabilities:{logging:{},tools:{}}}),this.registerTools()}registerTools(){this.server.tool("get_code_examples","Get all code examples for a specified language",{language:v.enum(g).optional()},async({language:t})=>{let e=await a(l.FULL_DOCU);t=t||"typescript";let n=d(e,t);return{content:[{type:"text",text:JSON.stringify(n,null,2)}]}})}async connect(t){await this.server.connect(t),this.log("Minimal MCP Server connected via stdio and ready.")}log(...t){this.server.server.sendLoggingMessage({level:"info",data:t.map(e=>typeof e=="string"?e:JSON.stringify(e))})}error(...t){this.server.server.sendLoggingMessage({level:"error",data:t.map(e=>typeof e=="string"?e:JSON.stringify(e))})}};async function S(){let o=new i,t=new x;await o.connect(t)}var y=import.meta.url===`file://${process.argv[1]}`,L=process.argv[1]?.endsWith("cli.ts")||process.argv[1]?.endsWith("cli.js");(y||L)&&S().catch(o=>{console.error("Failed to start server:",o instanceof Error?o.message:String(o)),process.exit(1)});export{i as a,S as b};
