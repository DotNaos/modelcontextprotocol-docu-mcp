import{StdioServerTransport as E}from"@modelcontextprotocol/sdk/server/stdio.js";import{McpServer as y}from"@modelcontextprotocol/sdk/server/mcp.js";import{z as f}from"zod";var m={typescript:{repo:"https://github.com/modelcontextprotocol/typescript-sdk",readme:"https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/refs/heads/main/README.md"},python:{repo:"https://github.com/modelcontextprotocol/python-sdk",readme:"https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/refs/heads/main/README.md"}},a={FULL_DOCU:"https://modelcontextprotocol.io/llms-full.txt",repos:m},p=Object.keys(m);async function g(r){try{let t=await fetch(r);if(!t.ok)throw new Error(`Error fetching documentation from ${r}: ${t.status} ${t.statusText}`);return await t.text()}catch(t){throw console.error(`Failed to fetch documentation: ${t}`),t}}function l(r,t){let e=r.split(`
`),s=[],n=[];e.forEach((o,i)=>{o.match(/^#+\s/)&&n.push(i)}),n.push(e.length);let h=new RegExp(`^\\\`\\\`\\\`${t}\\b`,"m");for(let o=0;o<n.length-1;o++){let i=n[o],x=n[o+1],d=e.slice(i,x).join(`
`);h.test(d)&&s.push(d)}return s}async function u(r){let t=a.repos[r].readme;try{let e=await fetch(t);if(!e.ok)throw new Error(`Error fetching README from ${t}: ${e.status} ${e.statusText}`);return await e.text()}catch(e){throw console.error(`Failed to fetch README for ${r}: ${e}`),e}}var c=class{constructor(){this.server=new y({name:"ModelContextProtocol Docu Server",version:"0.1.0"},{capabilities:{logging:{},tools:{}}}),this.registerTools()}registerTools(){this.server.tool("get_code_examples","Get all code examples for a specified language from the main documentation.",{language:f.enum(p)},async({language:t})=>{try{let e=await g(a.FULL_DOCU),s=l(e,t);return{content:[{type:"text",text:JSON.stringify(s,null,2)}]}}catch(e){throw this.error("Error in get_code_examples:",e),new Error(`Failed to get code examples: ${e instanceof Error?e.message:String(e)}`)}}),this.server.tool("get_readme","Get the README content for the specified SDK language.",{language:f.enum(p)},async({language:t})=>{try{return{content:[{type:"text",text:await u(t)}]}}catch(e){throw this.error(`Error in get_readme for ${t}:`,e),new Error(`Failed to fetch README for ${t}: ${e instanceof Error?e.message:String(e)}`)}})}async connect(t){await this.server.connect(t),this.log("Minimal MCP Server connected via stdio and ready.")}log(...t){this.server.server.sendLoggingMessage({level:"info",data:t.map(e=>typeof e=="string"?e:JSON.stringify(e))})}error(...t){this.server.server.sendLoggingMessage({level:"error",data:t.map(e=>typeof e=="string"?e:JSON.stringify(e))})}};async function v(){let r=new c,t=new E;await r.connect(t)}v().catch(r=>{console.error("Failed to start server:",r instanceof Error?r.message:String(r)),process.exit(1)});export{c as a,v as b};
