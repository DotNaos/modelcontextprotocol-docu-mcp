import{StdioServerTransport as a}from"@modelcontextprotocol/sdk/server/stdio.js";import{McpServer as s}from"@modelcontextprotocol/sdk/server/mcp.js";import{z as i}from"zod";var o=class{constructor(){this.server=new s({name:"Minimal MCP Server",version:"0.1.0"},{capabilities:{logging:{},tools:{}}}),this.registerTools()}registerTools(){this.server.tool("hello_world","A simple tool that returns a greeting.",{name:i.string().describe("The name to include in the greeting.")},async({name:r})=>{try{return this.log(`Executing hello_world tool with name: ${r}`),{content:[{type:"text",text:`Hello, ${r}! Welcome to the minimal MCP server.`}]}}catch(e){let n=e instanceof Error?e.message:String(e);return this.error(`Error in hello_world tool: ${n}`),{isError:!0,content:[{type:"text",text:`Error executing tool: ${n}`}]}}})}async connect(r){await this.server.connect(r),this.log("Minimal MCP Server connected via stdio and ready.")}log(...r){this.server.server.sendLoggingMessage({level:"info",data:r.map(e=>typeof e=="string"?e:JSON.stringify(e))})}error(...r){this.server.server.sendLoggingMessage({level:"error",data:r.map(e=>typeof e=="string"?e:JSON.stringify(e))})}};async function c(){let t=new o,r=new a;await t.connect(r)}var l=import.meta.url===`file://${process.argv[1]}`,g=process.argv[1]?.endsWith("cli.ts")||process.argv[1]?.endsWith("cli.js");(l||g)&&c().catch(t=>{console.error("Failed to start server:",t instanceof Error?t.message:String(t)),process.exit(1)});export{o as a,c as b};
